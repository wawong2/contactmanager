{"version":3,"sources":["components/Contact.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Contact","_this$props","this","props","name","email","react_default","a","createElement","phone","Component","Header","branding","className","href","defaultProps","App","components_Header","components_Contact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA+BeA,mLApBF,IAAAC,EACcC,KAAKC,MAApBC,EADCH,EACDG,KAAMC,EADLJ,EACKI,MACd,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKH,GACLC,EAAAC,EAAAC,cAAA,UAAKN,KAAKC,MAAMM,gBAdVC,aCDhBC,EAAS,SAAAR,GAAS,IACbS,EAAYT,EAAZS,SACP,OACIN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,2DACXP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACXP,EAAAC,EAAAC,cAAA,KAAGM,KAAK,IAAID,UAAU,gBAAgBD,GACtCN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,sBACVP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,YACVP,EAAAC,EAAAC,cAAA,KAAGM,KAAK,IAAID,UAAU,YAAtB,SAEJP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,YACVP,EAAAC,EAAAC,cAAA,KAAGM,KAAK,IAAID,UAAU,YAAtB,cAS5BF,EAAOI,aAAe,CAClBH,SAAU,UAYCD,QChBAK,gMAXX,OACEV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACS,EAAD,CAAQL,SAAS,oBACjBN,EAAAC,EAAAC,cAACU,EAAD,CAASd,KAAK,WAAWC,MAAM,iBAAiBI,MAAM,iBACtDH,EAAAC,EAAAC,cAACU,EAAD,CAASd,KAAK,cAAcC,MAAM,kBAAkBI,MAAM,yBANhDC,cCIES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.71f8e876.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n// import './contact.css'\n\nclass Contact extends Component {\n    // static propTypes = {\n    //     name: PropTypes.string.isRequired,\n    //     email: PropTypes.string.isRequired,\n    //     phone: PropTypes.string.isRequired\n    // }\n\n    render() {\n    const { name, email} = this.props;  \n    return (\n        <div>\n            <h4>{name}</h4>\n            <ul>\n                <li>{email}</li>\n                <li>{this.props.phone}</li>\n            </ul>\n        </div>\n    );\n    }\n}\n\nContact.propTypes = {\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired\n}\n\nexport default Contact;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = props => {\n    const {branding} = props;    \n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n            <div className=\"contianer\">\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\n                <div>\n                    <ul className=\"navbar-nav ml-auto\">\n                        <li className=\"nav-item\">\n                            <a href=\"/\" className=\"nav-link\">Home</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a href=\"/\" className=\"nav-link\">Home</a>\n                        </li>\n                    </ul>    \n                </div>\n            </div>\n        </nav>\n    );\n}\n\nHeader.defaultProps = {\n    branding: 'My App'\n}\n\nHeader.propTypes = {\n    branding: PropTypes.string.isRequired\n}\n\n// const headingStyle = {\n//     color: '#565656',\n//     fontSize: '50px'\n// }\n\nexport default Header;","import React, { Component } from 'react';\nimport Contact from './components/Contact';\nimport Header from './components/Header';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\"/>\n        <Contact name=\"John Doe\" email=\"jdoe@gmail.com\" phone=\"555-555-6574\"/>\n        <Contact name=\"Karen Smith\" email=\"karen@gmail.com\" phone=\"533-511-5224\"/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}